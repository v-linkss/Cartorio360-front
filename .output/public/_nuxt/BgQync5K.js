import{T as C,bD as d,r as D,a4 as w,a3 as O,ba as B,bE as z,h as E,bF as p,bG as H,y as M,m as R,bH as S}from"./CGGPSomy.js";const V=a=>a==="defer"||a===!1;function K(...a){var _;const n=typeof a[a.length-1]=="string"?a.pop():void 0;typeof a[0]!="string"&&a.unshift(n);let[t,l,e={}]=a;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof l!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const s=C(),v=l,g=()=>d.value,b=()=>s.isHydrating?s.payload.data[t]:s.static.data[t];e.server=e.server??!0,e.default=e.default??g,e.getCachedData=e.getCachedData??b,e.lazy=e.lazy??!1,e.immediate=e.immediate??!0,e.deep=e.deep??d.deep,e.dedupe=e.dedupe??"cancel";const f=()=>e.getCachedData(t,s)!=null;if(!s._asyncData[t]||!e.immediate){(_=s.payload._errors)[t]??(_[t]=d.errorValue);const i=e.deep?D:w;s._asyncData[t]={data:i(e.getCachedData(t,s)??e.default()),pending:D(!f()),error:O(s.payload._errors,t),status:D("idle"),_default:e.default}}const r={...s._asyncData[t]};delete r._default,r.refresh=r.execute=(i={})=>{if(s._asyncDataPromises[t]){if(V(i.dedupe??e.dedupe))return s._asyncDataPromises[t];s._asyncDataPromises[t].cancelled=!0}if((i._initial||s.isHydrating&&i._initial!==!1)&&f())return Promise.resolve(e.getCachedData(t,s));r.pending.value=!0,r.status.value="pending";const u=new Promise((c,o)=>{try{c(v(s))}catch(y){o(y)}}).then(async c=>{if(u.cancelled)return s._asyncDataPromises[t];let o=c;e.transform&&(o=await e.transform(c)),e.pick&&(o=j(o,e.pick)),s.payload.data[t]=o,r.data.value=o,r.error.value=d.errorValue,r.status.value="success"}).catch(c=>{if(u.cancelled)return s._asyncDataPromises[t];r.error.value=H(c),r.data.value=M(e.default()),r.status.value="error"}).finally(()=>{u.cancelled||(r.pending.value=!1,delete s._asyncDataPromises[t])});return s._asyncDataPromises[t]=u,s._asyncDataPromises[t]},r.clear=()=>T(s,t);const h=()=>r.refresh({_initial:!0}),P=e.server!==!1&&s.payload.serverRendered;{const i=R();if(i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const o=i._nuxtOnBeforeMountCbs;B(()=>{o.forEach(y=>{y()}),o.splice(0,o.length)}),z(()=>o.splice(0,o.length))}P&&s.isHydrating&&(r.error.value||f())?(r.pending.value=!1,r.status.value=r.error.value?"error":"success"):i&&(s.payload.serverRendered&&s.isHydrating||e.lazy)&&e.immediate?i._nuxtOnBeforeMountCbs.push(h):e.immediate&&h();const u=S();if(e.watch){const o=E(e.watch,()=>r.refresh());u&&p(o)}const c=s.hook("app:data:refresh",async o=>{(!o||o.includes(t))&&await r.refresh()});u&&p(c)}const m=Promise.resolve(s._asyncDataPromises[t]).then(()=>r);return Object.assign(m,r),m}function N(...a){const n=typeof a[a.length-1]=="string"?a.pop():void 0;typeof a[0]!="string"&&a.unshift(n);const[t,l,e={}]=a;return K(t,l,{...e,lazy:!0},null)}function T(a,n){n in a.payload.data&&(a.payload.data[n]=void 0),n in a.payload._errors&&(a.payload._errors[n]=d.errorValue),a._asyncData[n]&&(a._asyncData[n].data.value=void 0,a._asyncData[n].error.value=d.errorValue,a._asyncData[n].pending.value=!1,a._asyncData[n].status.value="idle"),n in a._asyncDataPromises&&(a._asyncDataPromises[n].cancelled=!0,a._asyncDataPromises[n]=void 0)}function j(a,n){const t={};for(const l of n)t[l]=a[l];return t}export{K as a,N as u};
