import{u as w,dG as d,r as D,a3 as O,a2 as B,aK as z,bY as H,g as M,bW as g,dH as E,x as K,l as R,bv as S}from"./g7uLgUnE.js";const V=a=>a==="defer"||a===!1;function j(...a){var v;const r=typeof a[a.length-1]=="string"?a.pop():void 0;typeof a[0]!="string"&&a.unshift(r);let[t,l,e={}]=a;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof l!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const s=w(),P=l,b=()=>d.value,C=()=>s.isHydrating?s.payload.data[t]:s.static.data[t];e.server=e.server??!0,e.default=e.default??b,e.getCachedData=e.getCachedData??C,e.lazy=e.lazy??!1,e.immediate=e.immediate??!0,e.deep=e.deep??d.deep,e.dedupe=e.dedupe??"cancel";const f=e.getCachedData(t,s),h=f!=null;if(!s._asyncData[t]||!e.immediate){(v=s.payload._errors)[t]??(v[t]=d.errorValue);const o=e.deep?D:O;s._asyncData[t]={data:o(h?f:e.default()),pending:D(!h),error:B(s.payload._errors,t),status:D("idle"),_default:e.default}}const n={...s._asyncData[t]};delete n._default,n.refresh=n.execute=(o={})=>{if(s._asyncDataPromises[t]){if(V(o.dedupe??e.dedupe))return s._asyncDataPromises[t];s._asyncDataPromises[t].cancelled=!0}if(o._initial||s.isHydrating&&o._initial!==!1){const c=o._initial?f:e.getCachedData(t,s);if(c!=null)return Promise.resolve(c)}n.pending.value=!0,n.status.value="pending";const u=new Promise((c,i)=>{try{c(P(s))}catch(y){i(y)}}).then(async c=>{if(u.cancelled)return s._asyncDataPromises[t];let i=c;e.transform&&(i=await e.transform(c)),e.pick&&(i=T(i,e.pick)),s.payload.data[t]=i,n.data.value=i,n.error.value=d.errorValue,n.status.value="success"}).catch(c=>{if(u.cancelled)return s._asyncDataPromises[t];n.error.value=E(c),n.data.value=K(e.default()),n.status.value="error"}).finally(()=>{u.cancelled||(n.pending.value=!1,delete s._asyncDataPromises[t])});return s._asyncDataPromises[t]=u,s._asyncDataPromises[t]},n.clear=()=>N(s,t);const m=()=>n.refresh({_initial:!0}),_=e.server!==!1&&s.payload.serverRendered;{const o=R();if(o&&_&&e.immediate&&!o.sp&&(o.sp=[]),o&&!o._nuxtOnBeforeMountCbs){o._nuxtOnBeforeMountCbs=[];const i=o._nuxtOnBeforeMountCbs;z(()=>{i.forEach(y=>{y()}),i.splice(0,i.length)}),H(()=>i.splice(0,i.length))}_&&s.isHydrating&&(n.error.value||f!=null)?(n.pending.value=!1,n.status.value=n.error.value?"error":"success"):o&&(s.payload.serverRendered&&s.isHydrating||e.lazy)&&e.immediate?o._nuxtOnBeforeMountCbs.push(m):e.immediate&&m();const u=S();if(e.watch){const i=M(e.watch,()=>n.refresh());u&&g(i)}const c=s.hook("app:data:refresh",async i=>{(!i||i.includes(t))&&await n.refresh()});u&&g(c)}const p=Promise.resolve(s._asyncDataPromises[t]).then(()=>n);return Object.assign(p,n),p}function G(...a){const r=typeof a[a.length-1]=="string"?a.pop():void 0;typeof a[0]!="string"&&a.unshift(r);const[t,l,e={}]=a;return j(t,l,{...e,lazy:!0},null)}function N(a,r){r in a.payload.data&&(a.payload.data[r]=void 0),r in a.payload._errors&&(a.payload._errors[r]=d.errorValue),a._asyncData[r]&&(a._asyncData[r].data.value=void 0,a._asyncData[r].error.value=d.errorValue,a._asyncData[r].pending.value=!1,a._asyncData[r].status.value="idle"),r in a._asyncDataPromises&&(a._asyncDataPromises[r]&&(a._asyncDataPromises[r].cancelled=!0),a._asyncDataPromises[r]=void 0)}function T(a,r){const t={};for(const l of r)t[l]=a[l];return t}export{j as a,G as u};
